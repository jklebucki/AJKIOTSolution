@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using AJKIOT.Shared.Models
@using AJKIOT.Web.Data
@using AJKIOT.Web.Services
@using AJKIOT.Web.Validation
@inject NavigationManager NavigationManager
@inject IAuthService AuthService

<PageTitle>Reset password</PageTitle>

<h1>Reset password</h1>
<h2>Reset your password.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <input type="hidden" name="Input.Code" value="@Input.Code" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your password." />
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your password." />
                <label for="confirm-password" class="form-label">Confirm password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Reset</button>
        </EditForm>
    </div>
</div>

@code {


    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Token { get; set; }

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    private string? Message { get; set; }

    protected override void OnInitialized()
    {
        if (Token is null || Email is null)
        {
            NavigationManager.NavigateTo("Account/InvalidPasswordReset");
        }
        Input.Email = Email!;
        Input.Code = Token!;
    }

    private async Task OnValidSubmitAsync()
    {
        var loginPage = $"{NavigationManager.BaseUri}Account/Login";
        var resetPasswordConfirmRequest = new ResetPasswordConfirmRequest
            {
                Email = Input.Email,
                NewPassword = Input.Password,
                Token = Input.Code,
                ApplicationAddress = loginPage
            };
        var result = await AuthService.ResetPasswordAsync(resetPasswordConfirmRequest);
        if (result.IsSuccess)
        {
            Message = "Your password has been reset.";
        }
        else
        {
            Message = $"An error occurred resetting your password: {string.Join(";", result.Errors)}";
        }

    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        [StrongPassword(ErrorMessage = "Password does not meet complexity requirements.")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
