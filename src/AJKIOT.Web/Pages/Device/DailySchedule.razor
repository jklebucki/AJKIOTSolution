@using AJKIOT.Shared.Models.DeviceFeatures
@using Blazorise
@inject NavigationManager NavigationManager

<Modal @ref="modalRef">
    <ModalContent Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <h1 class="mb-2">Weekly schedule</h1>
        </ModalHeader>
        <ModalBody>
            <div class="row mb-2">
                @for (int weekNumber = 1; weekNumber < 5; weekNumber++)
                {
                    <div class="col-md-3">
                        <DailyScheduleComponent FeatureId="@FeatureId" DayNumber="@weekNumber" Schedule="@SelectSchedule(weekNumber)" OnScheduleChanged="HandleScheduleChanged" />
                    </div>
                }
            </div>
            <div class="row mb-2">
                @for (int weekNumber = 5; weekNumber < 8; weekNumber++)
                {
                    <div class="col-md-3">
                        <DailyScheduleComponent FeatureId="@FeatureId" DayNumber="@weekNumber" Schedule="@SelectSchedule(weekNumber)" OnScheduleChanged="HandleScheduleChanged" />
                    </div>
                }
            </div>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Outline Clicked="@HideModal">Close</Button>
            <Button Color="Color.Primary" Outline Clicked="@SaveSchedules">Save Changes</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    [Parameter]
    public int FeatureId { get; set; }
    [Parameter]
    public EventCallback<List<DailyScheduleEntry>> OnScheduleChanged { get; set; }
    [Parameter]
    public List<DailyScheduleEntry> WeekSchedules { get; set; } = new List<DailyScheduleEntry>();

    private Modal modalRef = new Modal();

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        OnScheduleChanged.InvokeAsync(null);
        return modalRef.Hide();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ShowModal();
        }
    }

    private void HandleScheduleChanged(KeyValuePair<int, List<DailyScheduleEntry>> updatedSchedule)
    {
        WeekSchedules.RemoveAll(s => s.DayNumber == updatedSchedule.Key && s.FeatureId == FeatureId);
        WeekSchedules.AddRange(updatedSchedule.Value);
    }

    private void SaveSchedules()
    {
        OnScheduleChanged.InvokeAsync(WeekSchedules);
        HideModal();
    }

    private List<DailyScheduleEntry> SelectSchedule(int dayNumber)
    {
        return WeekSchedules.Where(s => s.DayNumber == dayNumber && s.FeatureId == FeatureId).ToList();
    }
}
