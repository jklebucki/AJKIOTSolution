@using AJKIOT.Shared.Models.DeviceFeatures
@using AJKIOT.Web.Translations
@using Blazorise

@if (Schedule != null)
{
    <div class="card">
        <div class="card-header" style="text-align:center; background-color: seagreen">
            @GetWeekdayName()
        </div>
        <div class="card-body">
            @foreach (var entry in Schedule.OrderBy(e => e.StartTime.ToTimeSpan()))
            {
                <div class="row">
                    <div class="col-10">
                        Entry #@entry.EntryNumber: @entry.StartTime.ToString(@"HH\:mm") - @entry.EndTime.ToString(@"HH\:mm")
                    </div>
                    <div class="col-2">
                        <Button Color="Color.Primary" Size="Size.Small" Outline @onclick="() => RemoveScheduleEntry(entry)">
                            <Icon Name="IconName.MinusCircle" />
                        </Button>
                    </div>
                </div>
            }
        </div>
        <div class="card-footer d-flex justify-content-end">
            <div>
                <div class="row">
                    <div class="col-5">
                        <TimePicker TValue="TimeSpan?" Size="Size.Small" Time="@newStartDateTime" TimeAs24hr="true" TimeChanged="@((TimeSpan? value) => StartDateTimeChanged(value))" />
                    </div>
                    <div class="col-5">
                        <TimePicker TValue="TimeSpan?" Size="Size.Small" Time="@newEndDateTime" TimeAs24hr="true" TimeChanged="@((TimeSpan? value) => EndDateTimeChanged(value))" />
                    </div>
                    <div class="col-2">
                        <Button Color="Color.Primary" Size="Size.Small" Outline @onclick="AddScheduleEntry">
                            <Icon Name="IconName.PlusCircle" />
                        </Button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int DayNumber { get; set; }

    [Parameter]
    public int FeatureId { get; set; }

    [Parameter]
    public List<DailyScheduleEntry> Schedule { get; set; } = new List<DailyScheduleEntry>();

    [Parameter]
    public EventCallback<KeyValuePair<int, List<DailyScheduleEntry>>> OnScheduleChanged { get; set; }

    private TimeSpan? newStartDateTime = TimeSpan.Parse("07:00");
    private TimeSpan? newEndDateTime = TimeSpan.Parse("08:00");

    protected override void OnInitialized()
    {
        if (Schedule == null)
        {
            Schedule = new List<DailyScheduleEntry>();
        }
        else
        {
            Schedule = Schedule.Where(d => d.DayNumber == DayNumber).OrderBy(e => e.StartTime.ToTimeSpan()).ToList();
        }
    }

    private string GetWeekdayName()
    {
        var weekday = Weekday.GetDayOfWeek(DayNumber, "EN");
        return weekday != null ? weekday.Name : string.Empty;
    }

    private void StartDateTimeChanged(TimeSpan? value)
    {
        newStartDateTime = value;
        AdjustEndDateTimeIfNeeded();
    }

    private void EndDateTimeChanged(TimeSpan? value)
    {
        newEndDateTime = value;
        AdjustStartDateTimeIfNeeded();
    }

    private void AdjustEndDateTimeIfNeeded()
    {
        if (newStartDateTime.HasValue && (newEndDateTime <= newStartDateTime))
        {
            newEndDateTime = newStartDateTime.Value.Add(TimeSpan.FromHours(1));
        }
    }

    private void AdjustStartDateTimeIfNeeded()
    {
        if (newEndDateTime.HasValue && (newEndDateTime <= newStartDateTime))
        {
            newStartDateTime = newEndDateTime.Value.Subtract(TimeSpan.FromHours(1));
        }
    }

    private async Task AddScheduleEntry()
    {
        var overlap = Schedule.Any(s => s.StartTime.ToTimeSpan() < newEndDateTime && s.EndTime.ToTimeSpan() > newStartDateTime);
        if (!overlap)
        {
            var newEntry = new DailyScheduleEntry
                {
                    FeatureId = FeatureId,
                    DayNumber = DayNumber,
                    EntryNumber = (Schedule.Any() ? Schedule.Max(e => e.EntryNumber) + 1 : 1),
                    StartTime = TimeOnly.FromTimeSpan(newStartDateTime.Value),
                    EndTime = TimeOnly.FromTimeSpan(newEndDateTime.Value)
                };
            Schedule.Add(newEntry);
            Schedule = Schedule.OrderBy(s => s.StartTime.ToTimeSpan()).ToList();
            newStartDateTime = newEntry.EndTime.ToTimeSpan().Add(TimeSpan.FromHours(1));
            newEndDateTime = newStartDateTime?.Add(TimeSpan.FromHours(1));
            var data = new KeyValuePair<int, List<DailyScheduleEntry>>(DayNumber, Schedule);
            await OnScheduleChanged.InvokeAsync(data);
        }
    }

    private async Task RemoveScheduleEntry(DailyScheduleEntry entry)
    {
        Schedule.Remove(entry);
        var data = new KeyValuePair<int, List<DailyScheduleEntry>>(DayNumber, Schedule);
        await OnScheduleChanged.InvokeAsync(data);
    }
}
