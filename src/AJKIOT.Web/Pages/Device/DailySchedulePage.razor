@page "/schedule/{DeviceId:int}"
@using AJKIOT.Shared.Models.DeviceFeatures
@inject NavigationManager NavigationManager

<h1 class="mb-2">Weekly schedule</h1>
<div class="mb-2">
    <div class="row">
        @for (int i = 1; i < 5; i++)
        {
            <div class="col-3">
                <DailyScheduleComponent DeviceId="@DeviceId" DayNumber="@i" Schedule="@SelectSchedule(i)" OnScheduleChanged="HandleScheduleChanged" />
            </div>
        }
    </div>

</div>
<div class="mb-2">
    <div class="row">
        @for (int i = 5; i < 8; i++)
        {
            <div class="col-3">
                <DailyScheduleComponent DeviceId="@DeviceId" DayNumber="@i" Schedule="@SelectSchedule(i)" OnScheduleChanged="HandleScheduleChanged" />
            </div>
        }
    </div>
</div>


<button class="btn btn-outline-primary" @onclick="SaveSchedules">Save schedule</button>

@code {
    [Parameter]
    public int DeviceId { get; set; }

    private List<DailyScheduleEntry> weekSchedules = new List<DailyScheduleEntry>();

    protected override void OnInitialized()
    {
        weekSchedules = new List<DailyScheduleEntry>();
    }

    private void HandleScheduleChanged(KeyValuePair<int, List<DailyScheduleEntry>> updatedSchedule)
    {
        weekSchedules.RemoveAll(s=>s.DayNumber == updatedSchedule.Key);
        weekSchedules.AddRange(updatedSchedule.Value);
    }

    private void SaveSchedules()
    {
        // Tu implementujemy logikę zapisu. Na razie wypiszmy dane do konsoli.
        Console.WriteLine("Zapisywanie harmonogramów...");
        foreach (var schedule in weekSchedules)
        {
            Console.WriteLine($"Day {schedule.DayNumber}, Entry #{schedule.EntryNumber}, Start: {schedule.StartTime}, End: {schedule.EndTime}");
        }

        NavigationManager.NavigateTo("/devices");
    }

    private List<DailyScheduleEntry> SelectSchedule(int dayNumber)
    {
        return weekSchedules.Where(s => s.DayNumber == dayNumber).ToList();
    }
}
