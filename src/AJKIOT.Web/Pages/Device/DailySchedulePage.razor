@page "/schedule/{DeviceId}"
@using AJKIOT.Shared.Models.DeviceFeatures

<h1 class="mb-2">Weekly schedule</h1>
<div class="mb-2">
    <div class="row">
        @for (int i = 0; i < 4; i++)
        {
            <div class="col-3">
                <DailyScheduleComponent Schedule="@weekSchedules[i]" OnScheduleChanged="HandleScheduleChanged" />
            </div>
        }
    </div>

</div>
<div class="mb-2">
    <div class="row">
        @for (int i = 4; i < 7; i++)
        {
            <div class="col-3">
                <DailyScheduleComponent Schedule="@weekSchedules[i]" OnScheduleChanged="HandleScheduleChanged" />
            </div>
        }
    </div>
</div>


<button class="btn btn-outline-primary" @onclick="SaveSchedules">Save schedule</button>

@code {
    [Parameter]
    public string DeviceId { get; set; }

    private List<DailySchedule> weekSchedules;

    protected override void OnInitialized()
    {
        weekSchedules = Enumerable.Range(1, 7)
            .Select(dayNumber => new DailySchedule { DayNumber = dayNumber })
            .ToList();
    }

    private void HandleScheduleChanged(DailySchedule updatedSchedule)
    {
        // Tutaj można zaimplementować logikę aktualizacji harmonogramu, jeśli jest potrzebna
    }

    private void SaveSchedules()
    {
        // Tu implementujemy logikę zapisu. Na razie wypiszmy dane do konsoli.
        Console.WriteLine("Zapisywanie harmonogramów...");
        foreach (var schedule in weekSchedules)
        {
            foreach (var entry in schedule.Entries)
            {
                Console.WriteLine($"Dzień {schedule.DayNumber}, Wpis #{entry.EntryNumber}, Start: {entry.StartTime}, Koniec: {entry.EndTime}");
            }
        }
    }
}
