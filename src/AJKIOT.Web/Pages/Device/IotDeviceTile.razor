@using AJKIOT.Shared.Models
@using System.Text.Json
@using AJKIOT.Shared.Models.DeviceFeatures
@using Blazorise
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (!scheduleMode)
{
    <div class="card">
        <div class="card-header d-flex justify-content-center">
            @if (editing)
            {
                <TextEdit @bind-Text="@IotDevice!.DeviceName" OnValueChanged="OnEditDeviceName" />
                <Button Class="btn btn-outline-primary" @onclick="@OnSaveButton"><Icon Name="IconName.Save" /></Button>
            } else
            {
                <h4 class="card-title">@IotDevice!.DeviceName</h4>
            }
        </div>
        <div class="card-body">
            <Alert Color="Color.Info" Visible>
                <AlertMessage>
                    Device ID: @IotDevice.Id
                </AlertMessage>
            </Alert>
            @foreach (var feature in features)
            {
                <Alert Color="@(feature.Value == 1 ? Color.Success : Color.Default)" Visible>
                    <AlertMessage>
                        Status : @(feature.Value == 1 ? "ON" : "OFF")
                    </AlertMessage>
                </Alert>
                switch (feature.Type)
                {
                    case "Switch":
                        <OnSwitch Feature="feature" IsOnChanged="ToggleDeviceStatus"></OnSwitch>
                        break;
                    case "OpenTimer":
                        <OpenTimer Feature="feature" IsOnChanged="ToggleDeviceStatus"></OpenTimer>
                        break;
                }
            }

        </div>
        <div class="card-footer d-flex justify-content-end">
            @if (IotDevice.IsScheduleAvailable())
            {
                <Tooltip Text="Add schedule">
                    <Button Class="btn btn-outline-primary me-2" onclick="@(() => OnScheduleButton())"><Icon Name="IconName.Calendar" /></Button>
                </Tooltip>
            }
            <Tooltip Text="Download firmware">
                <Button Class="btn btn-outline-secondary me-2" onclick="@(() => OnDownloadButton())"><Icon Name="IconName.Download" /></Button>
            </Tooltip>
            <Tooltip Text="Edit">
                <Button Class="btn btn-outline-success me-2" onclick="@(() => OnEditButton())"><Icon Name="IconName.Edit" /></Button>
            </Tooltip>
            <Tooltip Text="Delete">
                <Button Class="btn btn-outline-danger" onclick="@(() => OnDeleteButton())"><Icon Name="IconName.Delete" /></Button>
            </Tooltip>
        </div>
    </div>
}
else
{
    <DailySchedule OnScheduleChanged="@OnScheduleChanged" DeviceId="IotDevice!.Id"></DailySchedule>
}
@if(deleting)
{
    
}



@code {
    [Parameter]
    public IotDevice? IotDevice { get; set; }

    private List<DeviceFeature> features = new List<DeviceFeature>();
    private bool scheduleMode { get; set; }
    private bool isOn { get; set; }
    private bool editing { get; set; } = false;
    private bool deleting { get; set; } = false;

    [Parameter]
    public EventCallback<IotDevice> OnPinDeviceChanged { get; set; }

    private async Task OnScheduleChanged(List<DailyScheduleEntry> dailyScheduleEntries)
    {
        //if(dailyScheduleEntries != null)
        // Add logic here for scheduling
        scheduleMode = false;
        await Task.CompletedTask;
    }

    void OnEditButton()
    {
        editing = true;
    }
    void OnSaveButton()
    {
        editing = false;
    }
    void OnDeleteButton()
    {
        // Add logic here for deleting
    }

    void OnDownloadButton()
    {
        // Add logic here for downloading
    }

    private async Task ToggleDeviceStatus(DeviceFeature feature)
    {
        IotDevice!.DeviceFeaturesJson = JsonSerializer.Serialize(features);
        await OnPinDeviceChanged.InvokeAsync(IotDevice);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        features = JsonSerializer.Deserialize<List<DeviceFeature>>(IotDevice!.DeviceFeaturesJson)!;
    }

    protected override void OnAfterRender(bool firstRender)
    {

    }

    private async Task OnScheduleButton()
    {
        scheduleMode = true;
        await Task.CompletedTask;
    }
}
