@using AJKIOT.Shared.Models
@using System.Text.Json
@using AJKIOT.Shared.Models.DeviceFeatures
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if(!ScheduleMode)
{
<div class="card">
    <div class="card-body">
        <h5 class="card-title">@IotDevice!.DeviceName</h5>
        <p class="card-text">ID: @IotDevice.Id</p>
        @foreach (var feature in features)
        {
            <p class="card-text">@feature.Name : @feature.Value</p>
            <Switch Feature="feature" IsOnChanged="ToggleDeviceStatus"></Switch>
        }

    </div>
    <div class="card-footer">
        <button type="button" class="btn btn-primary" onclick="@(() => OnScheduleButton())">Schedule</button>
    </div>
</div>
} else
{
    <DailySchedule OnScheduleChanged="@OnScheduleChanged" DeviceId="IotDevice!.Id"></DailySchedule>
}
@code {
    [Parameter]
    public IotDevice? IotDevice { get; set; }
    private bool ScheduleMode { get; set; }
    private List<DeviceFeature> features = new List<DeviceFeature>();

    private bool IsOn { get; set; }

    [Parameter]
    public EventCallback<IotDevice> OnPinDeviceChanged { get; set; }


    private async Task OnScheduleChanged(List<DailyScheduleEntry> dailyScheduleEntries)
    {
        ScheduleMode = false;
        await Task.CompletedTask;
    }

    private async Task ToggleDeviceStatus(DeviceFeature feature)
    {
        IotDevice!.DeviceFeaturesJson = JsonSerializer.Serialize(features);
        await OnPinDeviceChanged.InvokeAsync(IotDevice);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        features = JsonSerializer.Deserialize<List<DeviceFeature>>(IotDevice!.DeviceFeaturesJson)!;
    }

    protected override void OnAfterRender(bool firstRender)
    {

    }

    private async Task OnScheduleButton()
    {
        ScheduleMode = true;
        await Task.CompletedTask;
    }
}
