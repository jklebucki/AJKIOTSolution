@using AJKIOT.Shared.Models
@using System.Text.Json
@using AJKIOT.Shared.Models.DeviceFeatures
@using AJKIOT.Shared.Requests
@using AJKIOT.Web.Services
@using Blazorise
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject LocalStorageService LocalStorage
@inject IJSRuntime JSRuntime
@inject IApiService Api
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (errorMessage != string.Empty)
{
    <Alert Color="Color.Danger" Visible>
        <AlertMessage>
            @errorMessage
        </AlertMessage>
    </Alert>
}

@switch (mode)
{
    case ViewMode.BasicMode:
        <div class="card">
            <div class="card-header d-flex justify-content-center">
                @if (editing)
                {
                    <TextEdit @bind-Text="@IotDevice!.DeviceName" OnValueChanged="OnEditDeviceName" />
                    <Tooltip Text="Save">
                        <Button Class="btn btn-outline-primary" @onclick="@OnSaveButton">
                            <Icon Name="IconName.Save" />
                        </Button>
                    </Tooltip>
                    <Tooltip Text="Cancel">
                        <Button Class="btn btn-outline-danger" @onclick="@OnCancelButton">
                            <Icon Name="IconName.Times" />
                        </Button>
                    </Tooltip>
                }
                else
                {
                    <h4 class="card-title">@IotDevice!.DeviceName</h4>
                }
            </div>
            <div class="card-body">
                <Alert Color="OnlineStatus!.IsOnline ? Color.Success : Color.Danger" Visible>
                    <AlertMessage>
                        Device ID: @IotDevice.Id @(OnlineStatus!.IsOnline ? "Online" : "Offline")
                    </AlertMessage>
                </Alert>
                @foreach (var feature in features)
                {
                    <Grid>
                        <Column ColumnSize="ColumnSize.IsHalf">
                            <Alert Color="@(feature.Value == 1 ? Color.Success : Color.Secondary)" Visible>
                                <AlertMessage>
                                    Status : @(feature.Value == 1 ? "ON" : "OFF")
                                </AlertMessage>
                            </Alert>
                        </Column>
                        <Column ColumnSize="ColumnSize.IsHalf">
                            @if (feature.IsScheduleAvailable())
                            {
                                <Tooltip Text="Add schedule">
                                    <Button Size="Size.Large" Class="btn btn-outline-primary me-2"
                                            onclick="@(() => OnScheduleButton(feature.Id))">
                                        <Icon Name="IconName.Calendar" />
                                    </Button>
                                </Tooltip>
                            }
                        </Column>
                    </Grid>
                    switch (feature.Type)
                    {
                        case "Switch":
                            <OnSwitch Feature="feature" IsOnChanged="ToggleDeviceStatus"></OnSwitch>
                            break;
                        case "OpenTimer":
                            <OpenTimer Feature="feature" IsOnChanged="ToggleDeviceStatus"></OpenTimer>
                            break;
                    }
                }

            </div>
            <div class="card-footer d-flex justify-content-end">

                <Tooltip Text="Download firmware">
                    <Button Class="btn btn-outline-secondary me-2" onclick="@(() => OnDownloadButton())">
                        <Icon Name="IconName.Download" />
                    </Button>
                </Tooltip>
                <Tooltip Text="Edit">
                    <Button Class="btn btn-outline-success me-2" onclick="@(() => OnEditButton())">
                        <Icon Name="IconName.Edit" />
                    </Button>
                </Tooltip>
                <Tooltip Text="Delete">
                    <Button Class="btn btn-outline-danger" onclick="@(() => OnDeleteButton())">
                        <Icon Name="IconName.Delete" />
                    </Button>
                </Tooltip>
            </div>
        </div>
        break;

    case ViewMode.ScheduleMode:
        <DailySchedule WeekSchedules="@IotDevice!.GetSchedule().ToList()" OnScheduleChanged="@OnScheduleChanged"
                       FeatureId="featureId"></DailySchedule>
        break;

    case ViewMode.DownloadCodeMode:
        <GetDeviceFirmware OnDownloaded="@OnCodeDownloaded" IotDevice="@IotDevice" />
        break;

    case ViewMode.DeleteMode:
        <DeleteDevice IotDevice="@IotDevice" OnDeleteConfirmed="@DeleteConfirmation" />
        break;

    default:
        <p>Unknown view</p>
        break;
}


@code {
    [Parameter]
    public IotDevice? IotDevice { get; set; }
    [Parameter]
    public IotDeviceStatus? OnlineStatus { get; set; }
    [Parameter]
    public EventCallback<IotDevice> OnDeviceChanged { get; set; }
    [Parameter]
    public EventCallback<int> OnDeviceDeleted { get; set; }

    private List<DeviceFeature> features = new List<DeviceFeature>();
    private ViewMode mode { get; set; }
    private bool isOn { get; set; }
    private bool editing { get; set; } = false;
    private bool deleting { get; set; } = false;
    private List<DailyScheduleEntry> deviceSchedule { get; set; } = new List<DailyScheduleEntry>();
    private string errorMessage { get; set; } = string.Empty;
    private int featureId { get; set; }
    private System.Threading.Timer timer;
    private enum ViewMode
    {
        BasicMode,
        ScheduleMode,
        DownloadCodeMode,
        DeleteMode,
    }

    protected override async Task OnInitializedAsync()
    {
        timer = new System.Threading.Timer(CheckCommunicationStatus!, null, TimeSpan.Zero, TimeSpan.FromSeconds(10));
        var userData = await LocalStorage.GetApplicationUserAsync();
        var hubConnection = new HubConnectionBuilder()
        .WithUrl($"https://localhost:7253/notificationHub?clientId={userData.Email}")
        .WithAutomaticReconnect()
        .Build();

        hubConnection.On<string>("ControlSignal", (signal) =>
        {
            var split = signal.Split(":");
            if (OnlineStatus!.DeviceId == int.Parse(split[1]))
            {
                OnlineStatus.IsOnline = true;
                OnlineStatus.LastOnlineSignal = DateTime.Now;
            }
        });
        await hubConnection.StartAsync();
    }
    private void CheckCommunicationStatus(object state)
    {

        if ((DateTime.Now - OnlineStatus!.LastOnlineSignal).Seconds > TimeSpan.FromSeconds(12).Seconds)
            OnlineStatus.IsOnline = false;
        else
            OnlineStatus.IsOnline = true;

    }

    private async Task OnScheduleChanged(List<DailyScheduleEntry> dailyScheduleEntries)
    {
        if (dailyScheduleEntries != null && IotDevice != null)
        {
            IotDevice.SetSchedule(dailyScheduleEntries);
            await SaveDeviceData();
            deviceSchedule = dailyScheduleEntries;
        }
        mode = ViewMode.BasicMode;
        await Task.CompletedTask;
    }

    private void OnCodeDownloaded()
    {
        mode = ViewMode.BasicMode;
    }

    private void OnEditButton()
    {
        editing = true;
    }

    private async Task OnSaveButton()
    {
        await SaveDeviceData();
        editing = false;
    }

    private void OnCancelButton()
    {
        editing = false;
    }
    private void OnDeleteButton()
    {
        mode = ViewMode.DeleteMode;
    }

    private async Task DeleteConfirmation(bool isConfirmed)
    {
        if (isConfirmed)
        {
            await DeleteDvice();
        }
        mode = ViewMode.BasicMode;
    }

    private async Task DeleteDvice()
    {
        try
        {
            var apiResponse = await Api.DeleteDeviceAsync(IotDevice!.Id);
            if (apiResponse.IsSuccess)
            {
                await OnDeviceDeleted.InvokeAsync(IotDevice.Id);
            }
            else
            {
                errorMessage = string.Join(", ", apiResponse.Errors);
            }
        }
        catch (UnauthorizedAccessException)
        {
            GoToLogIn();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void OnDownloadButton()
    {
        mode = ViewMode.DownloadCodeMode;
    }

    private async Task SaveDeviceData()
    {
        try
        {
            var apiResponse = await Api.UpdateDeviceAsync(new UpdateDeviceRequest { Device = IotDevice! });
            if (!apiResponse.IsSuccess)
            {
                errorMessage = string.Join(", ", apiResponse.Errors);
            }
            else
            {
                IotDevice = apiResponse.Data;
            }
        }
        catch (UnauthorizedAccessException)
        {
            GoToLogIn();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

    }

    private async Task ToggleDeviceStatus(DeviceFeature feature)
    {
        var features = IotDevice!.GetFeatures();
        var featureToUpdate = features.FirstOrDefault(x => x.Id == feature.Id);
        if (featureToUpdate != null)
            featureToUpdate.Update(feature);
        IotDevice.SetFeatures(features);
        await OnDeviceChanged.InvokeAsync(IotDevice);
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        features = JsonSerializer.Deserialize<List<DeviceFeature>>(IotDevice!.DeviceFeaturesJson)!;
        deviceSchedule = IotDevice.GetSchedule().ToList();
    }

    private void OnScheduleButton(int id)
    {
        featureId = id;
        mode = ViewMode.ScheduleMode;
        StateHasChanged();
    }

    private void GoToLogIn()
    {
        var customProvider = AuthenticationStateProvider as CustomAuthenticationStateProvider;
        customProvider!.NotifyUserLogout();
        NavigationManager.NavigateTo("/Account/Login");
    }
}
