@page "/devices"
@using AJKIOT.Shared.Models
@using AJKIOT.Shared.Models.DeviceFeatures
@using AJKIOT.Shared.Requests
@using AJKIOT.Web.Pages.Device
@using AJKIOT.Web.Services
@using Microsoft.AspNetCore.Authorization
@using Blazorise
@using Microsoft.AspNetCore.SignalR.Client
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@attribute [Authorize]
@inject IApiService api

<PageTitle>Devices</PageTitle>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">@errorMessage</div>
}
@if (!AddMode)
{
    <div class="container">
        <div class="row mb-4">
            <div class="col-4">
                <Button Color="Color.Primary" Clicked="@(()=> AddMode = !AddMode)">Add Device</Button>
            </div>
        </div>
    </div>
}
@if (devices != null && !AddMode)
{
    <div class="container">
        <div class="row">
            @foreach (var device in devices)
            {
                <div class="col-md-4 mb-4">
                    <IotDeviceTile IotDevice="device" OnDeviceChanged="HandleDeviceChanged" OnDeviceDeleted="HandleDeviceDeleted" />
                </div>
            }
        </div>
    </div>
}

@if (AddMode)
{
    <AddDevice OnDeviceAdded="HandleDeviceAdded" />
}

@code {

    private HubConnection hubConnection;
    private bool AddMode = false;
    private bool ScheduleMode = false;
    private string errorMessage = string.Empty;
    private List<IotDevice> devices = new List<IotDevice>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!.IsAuthenticated)
        {
            var userData = await LocalStorage.GetApplicationUserAsync();
            try
            {
                var apiResponse = await api.GetUserDevicesAsync(userData.Email);
                devices.AddRange(apiResponse.Data!.OrderBy(x => x.Id));
            }
            catch (UnauthorizedAccessException)
            {
                var customProvider = AuthenticationStateProvider as CustomAuthenticationStateProvider;
                customProvider!.NotifyUserLogout();
                NavigationManager.NavigateTo("/Account/Login");
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7253/notificationHub")
            .Build();

        hubConnection.On<IotDevice>("DeviceUpdated", (updatedDevice) =>
        {
            var index = devices.FindIndex(d => d.Id == updatedDevice.Id);
            if (index != -1)
            {
                devices[index] = updatedDevice;
                StateHasChanged();
            }
        });

        await hubConnection.StartAsync();
    }



    private async Task HandleDeviceChanged(IotDevice iotDevice)
    {
        if (iotDevice != null)
            try
            {
                var updateDeviceRequest = new UpdateDeviceRequest()
                    {
                        Device = iotDevice
                    };
                var apiResponse = await api.UpdateDeviceAsync(updateDeviceRequest);
                if (apiResponse != null && apiResponse.Data != null && apiResponse.IsSuccess)
                {
                    var device = devices.First(x => x.Id == apiResponse.Data.Id);
                    device.Update(apiResponse.Data);
                }
                errorMessage = string.Join("; ", apiResponse!.Errors);
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
    }

    private async Task HandleDeviceAdded(IotDevice iotDevice)
    {
        if (iotDevice != null)
            try
            {
                var createDeviceRequest = new CreateDeviceRequest()
                    {
                        UserEmail = (await LocalStorage.GetApplicationUserAsync()).Email,
                        Device = iotDevice
                    };
                iotDevice.OwnerId = (await LocalStorage.GetApplicationUserAsync()).Email;
                var deviceData = await api.CreateUserDeviceAsync(createDeviceRequest);
                if (deviceData != null && deviceData.Data != null && deviceData.IsSuccess)
                {
                    devices.Add(deviceData.Data);
                }
                errorMessage = string.Join("; ", deviceData!.Errors);
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        AddMode = false;
    }

    private void HandleDeviceDeleted(int deviceId)
    {
        devices.Remove(devices.First(x => x.Id == deviceId));
    }

}
