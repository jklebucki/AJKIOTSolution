@page "/devices"
@using AJKIOT.Shared.Models
@using AJKIOT.Shared.Models.DeviceFeatures
@using AJKIOT.Web.Pages.Device
@using AJKIOT.Web.Services
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@attribute [Authorize]
@inject IApiService api

<PageTitle>Devices</PageTitle>
@if (devices != null)
{
    <div class="container">
        <div class="row">
            @foreach (var device in devices)
            {
                <div class="col-md-4 mb-4">
                    <IotDeviceTile IotDevice="device" OnPinDeviceChanged="HandleDeviceChanged"></IotDeviceTile>
                </div>
            }
        </div>
    </div>
}
else
{
    <p>Loading...</p>
}


@code {

    private string errorMessage = string.Empty;

    private void HandleDeviceChanged(IotDevice iotDevice)
    {
        Console.WriteLine($"Pin status changed id: {iotDevice.DeviceFeaturesJson}");
    }

    private IEnumerable<IotDevice> devices = new List<IotDevice>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!.IsAuthenticated)
        {
            var userData = await LocalStorage.GetApplicationUserAsync();
            try
            {
                devices = await api.GetDeviceStatusAsync(userData.Email);
            }
            catch (UnauthorizedAccessException)
            {
                var customProvider = AuthenticationStateProvider as CustomAuthenticationStateProvider;
                customProvider!.NotifyUserLogout();
                NavigationManager.NavigateTo("/Account/Login");
            }

            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }
}
